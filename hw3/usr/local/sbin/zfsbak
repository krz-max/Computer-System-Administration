#!/bin/sh

usage() {
    echo "Usage:"
    echo "- create: zfsbak DATASET [ROTATION_CNT]"
    echo "- list: zfsbak -l|--list [DATASET|ID|DATASET ID...]"
    echo "- delete: zfsbak -d|--delete [DATASET|ID|DATASET ID...]"
    echo "- export: zfsbak -e|--export DATASET [ID]"
    echo "- import: zfsbak -i|--import FILENAME DATASET"
}

datetime() {
    date '+%Y-%m-%d-%H:%M:%S'
}

zfs_snap() {
    echo "Snap $1"
    zfs snapshot "$1"
}

zfs_destroy() {
    echo "Destroy $1"
    zfs destroy -r "$1"
}

zfs_list() {
    zfs list -H -o name -r -t snapshot "$1" | sort -t '@' -k 2,2 -k 1,1 | awk '{print NR "\t" $0}'
}

zfsbak_create() {
    dataset="$1"
    rotation="${2:-12}"
    current_time="$(datetime)"
    zfs_snap "${dataset}@zfsbak_${current_time}"
    for snap in $(zfs_list "${dataset}" | awk '{print $2}' | grep "^$dataset@" | tail -r | tail -n "+$((rotation+1))" | tail -r); do
        zfs_destroy "${snap}"
    done
    for subdir in $(zfs list -o name,mountpoint | grep "^${dataset}/" | awk '{print $1}'); do
        if [ "${subdir}" != "${dataset}" ]; then
            zfs_snap "${subdir}@zfsbak_${current_time}" > /dev/null
        fi
        for snap in $(zfs_list "${subdir}" | awk '{print $2}' | grep "^$subdir@" | tail -r | tail -n "+$((rotation+1))" | tail -r); do
            zfs_destroy "${snap}"
        done
    done
}

parse_dataset_id() {
    dataset="${1:-mypool}"
    id=""
    dummy=$(echo ${dataset} | grep -e "mypool")
    # Only ID or no argument
    if [ -z "${dummy}" ]; then
        id="$@"
        dataset="mypool"
        return 0
    fi
    # Given dataset and optional ID
    if [ $# -ge 2 ]; then
        shift; # shift the argument
        id="$@"
    fi
}

zfsbak_list() {
    printf "ID\tDATASET\t\tTIME\n"
    parse_dataset_id "$@"
    # Only dataset or No argument
    if [ -z "${id}" ]; then
        zfs_list "${dataset}" | awk '{print $2}' | awk -F'[@/]' '!seen[$1,$2,$NF]++ {print $0}' | awk -F'@' '{print NR "\t" $1 "\t" $2}' | sed 's/zfsbak_//g'
        return 0
    fi
    # ID arguments
    for i in ${id}; do
        # Note that is "^$i\t", not "^$i "
        zfs_list "${dataset}" | awk '{print $2}' | awk -F'[@/]' '!seen[$1,$2,$NF]++ {print $0}' | awk -F'@' '{print NR "\t" $1 "\t" $2}' | grep "^$i  " | sed 's/zfsbak_//g'
    done
}

zfsbak_delete() {
    parse_dataset_id "$@"
    if [ -z "${id}" ]; then
        for snap in $(zfs_list "${dataset}" | awk '{print $2}'); do
            zfs_destroy "${snap}"
        done
        return 0
    fi
    deleted=0
    for i in $id; do
        snap=$(zfs_list "${dataset}" | grep "^$((i-deleted))    " | awk '{print $2}')
        zfs_destroy "${snap}"
        deleted=$((deleted+1))
    done
}

zfsbak_export() {
    dataset="$1"
    id="${2:-1}"
    snapname="$(zfs_list "${dataset}" | grep "^$id  " | awk '{print $2}')"
    pathname="$(getent passwd "${SUDO_USER}" | cut -d: -f6)/$(echo ${dataset} | tr '/' '_')${snapname##$dataset}.zst.aes"
    rm -fr "${pathname}"
    echo "Export ${snapname} to ${pathname}"
    # pbkdf: password-based key derivation function
    zfs send -wR "${snapname}" | zstd -qc - | openssl enc -aes-256-cbc -pbkdf2 -pass pass:"${ZFSBAK_PASS}" -out "${pathname}"
    return 0
}

zfsbak_import() {
    filename="$1"
    dataset="$2"
    echo "Import ${filename} to ${dataset}"
    zstd -qcd "${filename}" | zfs receive -F "${dataset}"
    return 0
}

case "$1" in
    -l|--list)
        shift;
        zfsbak_list "$@"
        ;;
    -d|--delete)
        shift;
        zfsbak_delete "$@"
        ;;
    -e|--export)
        shift;
        zfsbak_export "$@"
        ;;
    -i|--import)
        shift;
        zfsbak_import "$@"
        ;;
    *)
        if [ $# -eq 0 ]; then
            usage
            exit 1
        fi
        zfsbak_create "$@"
        ;;
esac